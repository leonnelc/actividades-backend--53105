<div class="bg-dark py-5 mb-5">
  <div class="container">
    <div class="row align-items-center">
      <div class="col-md-4 text-center">
        <div class="position-relative d-inline-block">
          {{#if user.avatar}}
          <img src="{{user.avatar}}" alt="{{user.first_name}} {{user.last_name}}"
            class="rounded-circle img-thumbnail mb-3" style="width: 150px; height: 150px; object-fit: cover;">
          {{else}}
          <div class="bg-secondary rounded-circle d-inline-flex align-items-center justify-content-center mb-3"
            style="width: 150px; height: 150px;">
            <span class="fs-1 text-light">{{firstChar user.first_name}}{{firstChar
              user.last_name}}</span>
          </div>
          {{/if}}
          <button class="btn btn-primary btn-sm position-absolute bottom-0 end-0 m-2 upload-btn" data-bs-toggle="modal"
            data-bs-target="#avatarUploadModal" style="display: none;">
            <i class="bi bi-upload"></i>
          </button>
        </div>
      </div>
      <div class="col-md-8">
        <h1 class="display-4">{{user.first_name}} {{user.last_name}}</h1>
        <p class="lead">{{user.role}}</p>
      </div>
    </div>
  </div>
</div>

<div class="container">
  <div class="row">
    <div class="col-md-6 mb-4">
      <div class="card border-secondary">
        <div class="card-header bg-secondary">
          <h3 class="card-title mb-0">Personal Information</h3>
        </div>
        <div class="card-body">
          <p class="mb-2"><strong>Email:</strong> {{user.email}}</p>
          <p class="mb-2"><strong>Age:</strong> {{#if user.age}}{{user.age}}{{else}}Unknown{{/if}}</p>
          <p class="mb-2"><strong>Role:</strong> {{user.role}}</p>
          {{#if (eq user.role "user")}}
          <button id="premiumButton" class="btn btn-warning mt-3">Upgrade to Premium</button>
          {{else if (eq user.role "premium")}}
          <button id="premiumButton" class="btn btn-secondary mt-3">Switch to User</button>
          {{/if}}
          <div id="premiumStatus" class="mt-3" style="display: none;"></div>
        </div>
      </div>
    </div>
    {{#if (neq user.role "admin")}}
    <div class="col-md-6 mb-4">
      <div class="card border-secondary">
        <div class="card-header bg-secondary">
          <h3 class="card-title mb-0">Documents</h3>
        </div>
        <div class="card-body">
          <ul class="list-group list-group-flush">
            <li
              class="list-group-item d-flex justify-content-between align-items-center bg-dark text-light border-secondary">
              ID
              {{#if (lookup user.documents 'ID')}}
              <a href="{{lookup user.documents 'ID'}}" class="text-success text-decoration-none" target="_blank">✓</a>
              {{else}}
              <span class="text-danger">✗</span>
              {{/if}}
            </li>
            <li
              class="list-group-item d-flex justify-content-between align-items-center bg-dark text-light border-secondary">
              Address Proof
              {{#if (lookup user.documents 'address_proof')}}
              <a href="{{lookup user.documents 'address_proof'}}" class="text-success text-decoration-none"
                target="_blank">✓</a>
              {{else}}
              <span class="text-danger">✗</span>
              {{/if}}
            </li>
            <li
              class="list-group-item d-flex justify-content-between align-items-center bg-dark text-light border-secondary">
              Account Status Proof
              {{#if (lookup user.documents 'account_status_proof')}}
              <a href="{{lookup user.documents 'account_status_proof'}}" class="text-success text-decoration-none"
                target="_blank">✓</a>
              {{else}}
              <span class="text-danger">✗</span>
              {{/if}}
            </li>
          </ul>
          <button class="btn btn-primary mt-3" data-bs-toggle="modal" data-bs-target="#documentUploadModal">
            Upload Documents
          </button>
        </div>
      </div>
    </div>
  </div>
  <div class="row">
    <div>
      <button class="btn btn-primary" data-bs-toggle="collapse" data-bs-target="#collapseSessions">Active
        sessions</button>
      <div class="collapse my-1" id="collapseSessions">
      </div>
    </div>
  </div>

</div>
{{/if}}

<!-- Avatar Upload Modal -->
<div class="modal fade" id="avatarUploadModal" tabindex="-1" aria-labelledby="avatarUploadModalLabel"
  aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="avatarUploadModalLabel">Upload Avatar</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="uploadForm" enctype="multipart/form-data">
          <div class="mb-3">
            <label for="avatar" class="form-label">Avatar</label>
            <input type="file" class="form-control" id="avatar" name="avatar" accept="image/jpeg, image/png, image/gif, image/webp, image/svg+xml, image/bmp, image/x-icon, image/avif">
          </div>
          <button type="submit" class="btn btn-primary">Upload</button>
        </form>
        <div id="uploadStatus" class="mt-3" style="display: none;"></div>
      </div>
    </div>
  </div>
</div>

<!-- Document Upload Modal -->
<div class="modal fade" id="documentUploadModal" tabindex="-1" aria-labelledby="documentUploadModalLabel"
  aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="documentUploadModalLabel">Upload Documents</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="documentUploadForm" enctype="multipart/form-data">
          <div>
            <label for="ID" class="form-label">ID</label>
            <input type="file" class="form-control" id="ID" name="ID" accept="image/jpeg, image/png, application/pdf">
          </div>

          <div class="mt-3">
            <label for="address_proof" class="form-label">Proof of address</label>
            <input type="file" class="form-control" id="address_proof" name="address_proof"
              accept="image/jpeg, image/png, application/pdf">
          </div>

          <div class="mt-3">
            <label for="account_status_proof" class="form-label">Proof of account status</label>
            <input type="file" class="form-control" id="account_status_proof" name="account_status_proof"
              accept="image/jpeg, image/png, application/pdf">
          </div>

          <button type="submit" class="btn btn-primary mt-3">Upload</button>
        </form>
        <div id="documentUploadStatus" class="mt-3" style="display: none;"></div>
      </div>
    </div>
  </div>
</div>

<!-- End session modal  -->
<div class="modal fade" id="endSessionModal" tabindex="-1" aria-labelledby="endSessionModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="endSessionModalLabel">End Session</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <p>Are you sure you want to end this session?</p>
        <p class="text-muted"><i class="bi bi-info-circle me-2"></i>It may take up to 15 minutes for this change to take
          effect.</p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-danger" id="confirmEndSession">End Session</button>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function () {

    // Avatar upload logic
    const avatarContainer = document.querySelector('.position-relative');
    const uploadBtn = avatarContainer.querySelector('.upload-btn');
    const uploadForm = document.getElementById('uploadForm');
    const uploadStatus = document.getElementById('uploadStatus');
    const modal = new bootstrap.Modal(document.getElementById('avatarUploadModal'));

    avatarContainer.addEventListener('mouseenter', function () {
      uploadBtn.style.display = 'block';
    });

    avatarContainer.addEventListener('mouseleave', function () {
      uploadBtn.style.display = 'none';
    });

    uploadForm.addEventListener('submit', function (e) {
      e.preventDefault();

      const formData = new FormData(this);

      uploadStatus.style.display = 'block';
      uploadStatus.textContent = 'Uploading...';
      uploadStatus.className = 'mt-3 text-info';

      fetch('/api/users/{{user.id}}/avatar', {
        method: 'POST',
        body: formData
      })
        .then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.json();
        })
        .then(data => {
          uploadStatus.textContent = 'Upload successful!';
          uploadStatus.className = 'mt-3 text-success';
          setTimeout(() => {
            modal.hide();
            location.reload();
          }, 1500);
        })
        .catch(error => {
          console.error('Error:', error);
          uploadStatus.textContent = 'Upload failed. Please try again.';
          uploadStatus.className = 'mt-3 text-danger';
        });
    });

    // Document upload logic
    const documentUploadForm = document.getElementById('documentUploadForm');
    const documentUploadStatus = document.getElementById('documentUploadStatus');
    const documentModal = new bootstrap.Modal(document.getElementById('documentUploadModal'));

    documentUploadForm.addEventListener('submit', function (e) {
      e.preventDefault();

      const formData = new FormData(this);

      documentUploadStatus.style.display = 'block';
      documentUploadStatus.textContent = 'Uploading...';
      documentUploadStatus.className = 'mt-3 text-info';

      fetch('/api/users/{{user.id}}/documents', {
        method: 'POST',
        body: formData
      })
        .then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.json();
        })
        .then(data => {
          documentUploadStatus.textContent = 'Upload successful!';
          documentUploadStatus.className = 'mt-3 text-success';
          setTimeout(() => {
            documentModal.hide();
            location.reload();
          }, 1500);
        })
        .catch(error => {
          console.error('Error:', error);
          documentUploadStatus.textContent = 'Upload failed. Please try again.';
          documentUploadStatus.className = 'mt-3 text-danger';
        });
    });

    // Premium upgrade/downgrade logic
    const premiumButton = document.getElementById('premiumButton');
    const premiumStatus = document.getElementById('premiumStatus');

    if (premiumButton) {
      premiumButton.addEventListener('click', function () {
        premiumStatus.style.display = 'block';
        premiumStatus.textContent = 'Processing...';
        premiumStatus.className = 'mt-3 text-info';

        fetch('/api/users/premium/{{user.id}}', {
          method: 'GET',
          headers: {
            'Accept': 'application/json',
          }
        })
          .then(response => {
            if (!response.ok) {
              return response.json().then(err => {throw err;});
            }
            return response.json();
          })
          .then(data => {
            premiumStatus.textContent = 'Success! Reloading page...';
            premiumStatus.className = 'mt-3 text-success';
            setTimeout(() => {
              location.reload();
            }, 1500);
          })
          .catch(error => {
            console.error('Error:', error);
            premiumStatus.textContent = error.message || 'An error occurred. Please try again.';
            premiumStatus.className = 'mt-3 text-danger';
          });
      });
    }

    // Show active sessions logic
    const sessionsContainer = document.getElementById("collapseSessions");
    const confirmEndSessionBtn = document.getElementById("confirmEndSession");
    const endSessionModalElement = document.getElementById("endSessionModal");
    const endSessionModal = new bootstrap.Modal(endSessionModalElement);
    confirmEndSessionBtn.addEventListener("click", endSession);
    let activeSessions;
    function setModalTokenId(tokenId) {
      endSessionModalElement.setAttribute("token-id", tokenId);
    }
    function endSession() {
      confirmEndSessionBtn.disabled = true;
      const tokenId = endSessionModalElement.getAttribute("token-id");
      fetch(`/api/users/{{user.id}}/tokens/${tokenId}`, {method: "DELETE"}).then((response) => {
        if (!response.ok) return console.log(`Error deleting user token`);
        endSessionModal.hide();
        fetchSessions();
      }).finally(() => {
        confirmEndSessionBtn.disabled = false;
      })

    }
    function displaySessions() {
      sessionsContainer.innerHTML = "";
      for (let session of activeSessions) {
        const div = document.createElement("div");
        div.id = session.id;
        div.className = "card mb-3";
        const cardHeader = document.createElement("div");
        cardHeader.className = "card-header";
        const cardTitle = document.createElement("h6");
        cardTitle.className = "card-title mb-0"
        cardTitle.innerHTML = "Session Details";
        cardHeader.appendChild(cardTitle);
        div.appendChild(cardHeader);
        const cardBody = document.createElement("div");
        cardBody.className = "card-body";
        const ul = document.createElement("ul");
        ul.className = "list-group list-group-flush";
        ul.innerHTML = `
              <li class="list-group-item d-flex justify-content-between align-items-center">
                <span><i class="bi bi-laptop me-2"></i>Platform</span>
                <span class="text-muted">${session.platform}</span>
              </li>
              <li class="list-group-item d-flex justify-content-between align-items-center">
                <span><i class="bi bi-globe me-2"></i>Browser</span>
                <span class="text-muted">${session.browser}</span>
              </li>
              <li class="list-group-item d-flex justify-content-between align-items-center">
                <span><i class="bi bi-clock me-2"></i>Created at</span>
                <span class="text-muted">${new Date(session.createdAt)}</span>
              </li>`
        cardBody.appendChild(ul);
        const deleteBtn = document.createElement("button");
        deleteBtn.className = "btn btn-danger btn-sm"
        deleteBtn.innerHTML = "End Session";
        deleteBtn.setAttribute("data-bs-toggle", "modal");
        deleteBtn.setAttribute("data-bs-target", "#endSessionModal")
        deleteBtn.addEventListener("click", () => {
          setModalTokenId(session.id);
        })
        cardBody.appendChild(deleteBtn);
        div.appendChild(cardBody);
        let test = `
          <div class="card-header">
            <h6 class="card-title mb-0">Session Details</h6>
        </div>
          <div class="card-body">
            <ul class="list-group list-group-flush">
              <li class="list-group-item d-flex justify-content-between align-items-center">
                <span><i class="bi bi-laptop me-2"></i>Platform</span>
                <span class="text-muted">${session.platform}</span>
              </li>
              <li class="list-group-item d-flex justify-content-between align-items-center">
                <span><i class="bi bi-globe me-2"></i>Browser</span>
                <span class="text-muted">${session.browser}</span>
              </li>
              <li class="list-group-item d-flex justify-content-between align-items-center">
                <span><i class="bi bi-clock me-2"></i>Created at</span>
                <span class="text-muted">${new Date(session.createdAt)}</span>
              </li>
            </ul>
            <button type="button" class="btn btn-danger btn-sm" data-bs-toggle="modal" data-bs-target="#endSessionModal" onclick="javascript:setModalTokenId(${session.id})">
                  End Session
                </button>
          </div>
        `
        sessionsContainer.appendChild(div);
      }
      const endAllSessionsBtn = document.createElement("button");
      endAllSessionsBtn.className = "btn btn-danger";
      endAllSessionsBtn.innerHTML = "End all active sessions";
      endAllSessionsBtn.addEventListener("click", () => {
        endAllSessionsBtn.disabled = true;
        fetch("/api/users/{{user.id}}/tokens", {method: "DELETE"}).then((response) => {
          if (response.ok)
            window.navigation.reload()
        }).finally(() => {endAllSessionsBtn.disabled = false;})
      })
      sessionsContainer.appendChild(endAllSessionsBtn);
    }
    function fetchSessions() {
      fetch("/api/users/{{user.id}}/tokens", {method: "GET"}).then((response) => {
        response.json().then((result) => {
          activeSessions = result.tokens;
          displaySessions();
        })
      })
    }
    fetchSessions();
  });
</script>
